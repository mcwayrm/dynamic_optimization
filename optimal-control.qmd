---
title: "Optimal Control"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---

# Current Value Hamiltonian

```{python}

```

# Phase Diagram

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Parameter values
a = 20
b = 1
c = 0.5
d = 0.002
r = 0.1

# Define the differential equation system
# X_dot = c*X - d*X^2 - h
# h_dot = -h * (r - c + 2*d*X)

def system(t, y):
    return [
        c * y[0] - d * y[0]**2 - y[1],  # dX/dt
        -y[1] * (r - c + 2 * d * y[0])  # dh/dt
    ]

# Create the X_dot = 0 isocline
y1 = np.arange(0, 251, 1)
xisocline = c * y1 - d * y1**2

# Graph trajectories and isoclines on the same figure
plt.figure(figsize=(10, 6))
plt.plot(y1, xisocline, 'k', label=r'$\dot{X} = 0$ Isocline', linewidth=2)

# Plotting multiple trajectories
for y20 in range(0, 41, 2):
    sol = solve_ivp(system, [1, 8], [120, y20], t_eval=np.linspace(1, 8, 300))
    plt.plot(sol.y[0], sol.y[1], label=f'y2_0={y20}', linewidth=2)

# Plot the vertical isocline line
x_isocline = (c - r) / (2 * d)
plt.axvline(x_isocline, linestyle='-', linewidth=2, color='k', label=r'$h$ Isocline')

# Add labels and title
plt.xlabel('Stock (X)')
plt.ylabel('Harvest (h)')
plt.title('Trajectories and Isoclines')
# plt.legend()
plt.grid(True)
plt.show()
```

